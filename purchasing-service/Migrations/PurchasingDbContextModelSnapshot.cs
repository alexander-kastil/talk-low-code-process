// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PurchasingService.Data;

#nullable disable

namespace PurchasingService.Migrations
{
    [DbContext(typeof(PurchasingDbContext))]
    partial class PurchasingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PurchasingService.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PurchasingService.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("PurchasingService.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductName = "Butter Chicken",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductName = "Blini with Salmon",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 3,
                            ProductName = "Wiener Schnitzel",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 4,
                            ProductName = "Cevapcici",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 5,
                            ProductName = "Germknoedel",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 6,
                            ProductName = "Greek Salad",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 7,
                            ProductName = "Spare Ribs",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 8,
                            ProductName = "Falaffel with Humus.",
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 9,
                            ProductName = "Butter Chicken",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 10,
                            ProductName = "Blini with Salmon",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 11,
                            ProductName = "Wiener Schnitzel",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 12,
                            ProductName = "Cevapcici",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 13,
                            ProductName = "Germknoedel",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 14,
                            ProductName = "Greek Salad",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 15,
                            ProductName = "Spare Ribs",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 16,
                            ProductName = "Falaffel with Humus.",
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 17,
                            ProductName = "Butter Chicken",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 18,
                            ProductName = "Blini with Salmon",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 19,
                            ProductName = "Wiener Schnitzel",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 20,
                            ProductName = "Cevapcici",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 21,
                            ProductName = "Germknoedel",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 22,
                            ProductName = "Greek Salad",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 23,
                            ProductName = "Spare Ribs",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 24,
                            ProductName = "Falaffel with Humus.",
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 25,
                            ProductName = "Pad Ka Prao",
                            SupplierId = 4
                        });
                });

            modelBuilder.Entity("Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            Address = "Graben 21",
                            City = "Vienna",
                            CompanyName = "Wiener Feinkost GmbH",
                            ContactName = "Anna Schmid",
                            ContactTitle = "Einkaufsleiterin",
                            Country = "Austria",
                            EMail = "anna.schmid@wiener-feinkost.example",
                            HomePage = "https://wiener-feinkost.example",
                            Phone = "+43 1 234 5678",
                            PostalCode = "1010",
                            Region = "Wien"
                        },
                        new
                        {
                            SupplierId = 2,
                            Address = "Marienplatz 1",
                            City = "Muenchen",
                            CompanyName = "Muenchner Gewuerze GmbH",
                            ContactName = "Juergen Mueller",
                            ContactTitle = "Verkaufsleiter",
                            Country = "Germany",
                            EMail = "info@muenchner-gewuerze.example",
                            HomePage = "https://muenchner-gewuerze.example",
                            Phone = "+49 89 123456",
                            PostalCode = "80331",
                            Region = "Bayern"
                        },
                        new
                        {
                            SupplierId = 3,
                            Address = "Via Dante 34",
                            City = "Milano",
                            CompanyName = "Antica Cucina S.r.l.",
                            ContactName = "Lucia Romano",
                            ContactTitle = "Responsabile Acquisti",
                            Country = "Italy",
                            EMail = "info@anticacucina.example",
                            HomePage = "https://anticacucina.example",
                            Phone = "+39 02 3456789",
                            PostalCode = "20121",
                            Region = "Lombardia"
                        },
                        new
                        {
                            SupplierId = 4,
                            Address = "Sukhumvit Rd. 45",
                            City = "Bangkok",
                            CompanyName = "Bangkok Foods Co., Ltd.",
                            ContactName = "Somsak Chaiyawan",
                            ContactTitle = "Operations Manager",
                            Country = "Thailand",
                            EMail = "somsak.chaiyawan@bangkokfoods.example",
                            HomePage = "https://bangkokfoods.example",
                            Phone = "+66 2 123 4567",
                            PostalCode = "10100",
                            Region = ""
                        });
                });

            modelBuilder.Entity("PurchasingService.Models.Order", b =>
                {
                    b.HasOne("Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PurchasingService.Models.OrderDetail", b =>
                {
                    b.HasOne("PurchasingService.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PurchasingService.Models.SupplierProduct", b =>
                {
                    b.HasOne("Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PurchasingService.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Supplier", b =>
                {
                    b.Navigation("SupplierProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
